I"+
<h2 id="数据类型">数据类型</h2>
<p><strong>本文列出了使用中可能会出错的数据类型例子</strong></p>
<ul>
  <li>typeof操作符
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alert(typeof null); //null
</code></pre></div>    </div>
  </li>
  <li>浮点数
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var num=10.0 //整数 解析为10
a+b==0.3 //False 浮点数最高精度时17位小数，在进行计算时其精度远远不如整数
</code></pre></div>    </div>
  </li>
  <li>NaN
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alert(NaN == Nan); //NaN与任何数都不相等；任何数除以0不会报错会返回NaN；任何涉及NaN的操作都返回NaN
Boolean(NaN); //false
alert(isNaN(NaN)); //true
alert(isNaN("blue")); //true
alert(isNaN("10")); //false isNaN()会尝试把接收到的值转换为数值，如果不能转换，返回true
</code></pre></div>    </div>
  </li>
  <li>数值转换
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Number() //可以用于任何数据类型
Number(undefined); //NaN
Number("00011"); //11
parseInt() //专门把字符串转换成数值;主动忽略空格直到第一个非空字符；如果第一个字符是数字字符，继续解析，直到结束或者遇到第一个非数字字符
parseInt("1234blue"); //1234
parseInt("0xAF"， 16); //175
parseFloat() //专门把字符串转换成数值
</code></pre></div>    </div>
  </li>
  <li>一元加减操作符
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var s1="01"; s1 = +s1;//一元加操作符，对数值不产生影响，但是对于非数值会执行NUmber()一样的转换 值变成数值1
var s1="01"; s1 = +s1;//一元减操作符，将数值不变成负数，但是对于非数值会执行NUmber()一样的转换，之后在将得到的数值变为负数 值变成数值-1
</code></pre></div>    </div>
  </li>
  <li>布尔操作符
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>null || null; //null
NaN || NaN; //NaN
undefined || undefined; //undifined
Infinity * 0; //NaN
Infinity * Infinity; //Infinity
Infinity / Infinity; //Infinity
null == undefined; //true
"NaN" == NaN; //false
true == 1; //true
true == 2; //false
"5" == 5; //true
"5" === 5; //false
</code></pre></div>    </div>
  </li>
</ul>
:ET